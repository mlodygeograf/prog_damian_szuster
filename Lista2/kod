import numpy as np
import string
from PIL import Image
import zipfile
from PyPDF2 import PdfFileReader, PdfFileWriter

#Zadanie 1

def password():
    """
    Funkcja generująca losowe, 8-elementowe hasło.
    
    Produkty programu:
    ------------------
    password - str:
        losowe 8-elementowe hasło
    """
    
    #Lista znaków, za pomocą których możemy utworzyć hasło.
    znaki = list(string.ascii_letters + string.digits + string.punctuation)

    #Pusty string, który finalnie będzie naszym hasłem.
    password = ""

    #Pętla, która wylosuje 8 znaków i połączy je w hasło.
    i = 0
    while i < 8:
        k = np.random.randint(0, len(znaki))
        password += znaki[k]
        i += 1
    return password

#Zadanie 2

def mini(inp, size, outp):
    """
    Funckja tworząca miniaturę obrazu.
    
    Parametry:
    ----------
    inp - str:
        adres obrazu, którego miniaturę chcemy otrzymać
    size - list:
        wektor zawierający długość i szerokość miniatury
    outp - str:
        adres docelowy miniatury
    
    Produkty programu:
    ------------------
    obraz - PIL.JpegImagePlugin.JpegImageFile
        miniatura obrazu
    """
    obraz = Image.open(inp)
    obraz.thumbnail(size)
    obraz.save(outp + ".jpg", "JPEG")
    return obraz

#Zadanie 3

def zipp(catalogue, location=0):
    """
    Funkcja tworząca kopie bezpiczeństwa katalogu i pakująca je do archiwum zip.
    
    Parametry:
    ----------
    catalogue: str:
        adres katalogu, nad którym program będzie pracował
    location: str:
        adres, do którego zostanie przesłane archiwum
    """
    time = datatime.date.today()
    i = 0
    file_name = ""

    #Znajdowanie nazwy katalogu
    while True:
        if catalogue[::-1][i] in '\/':
            break
        file_name += catalogue[::-1][i]
        i += 1

    name = str(date) + ' copy - ' + file_name + '.zip'
    
    if location != 0:
        os.chdir(location)

    #Tworzenie archiwum i przesyłanie kopii plików do niego
    zip_copy = zipfile.ZipFile(name, 'w')
    os.chdir(catalog_name)

    for file in os.listdir():
        zip_copy.write(file)

    zip_copy.close()
    return zip_copy
    
#Zadanie 4

def pdf_split(path, page, name1, name2):
    """
    Program dzielący plik pdf na dwa mniejsze dokumenty.
    
    Parametry:
    ----------
    path - str:
        adres pliku pdf przeznaczonego do podziału
    page - list:
        lista z numerami stron, będących początkami kolejnych mniejszych plików
    name1 - str:
        nazwa pierwszego z plików pdf po podziale
    name2 - str:
        nazwa drugiego z plików pdf po podziale
    """
    #Wczytywanie pliku pdf.
    pdf0 = PdfReader(path)
    n = pdf0.numPages
    
    #Tworzenie dwóch nowych, pustych dokumentów
    split1, split2 = PdfWriter(), PdfWriter()
    
    for i in range(0, page-1):
        num = pdf0.getPage(i)
        split1.addPage(num)
    with open(name1, "w") as out1:
        split1.write(out1)
        
    for j in range(page, n):
        num = pdf0.getPage(j)
        split2.addPage(num)
    with open(name2, "w") as out2:
        split2.write(out2)
    
    return split1, split2
